![image_750x_5d36ab7256956](https://user-images.githubusercontent.com/42566418/63431503-934eaf00-c43c-11e9-8641-d541b2b563f7.jpg)


Kops Installation
------------------

curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

kops version


Kubectl Installation
--------------------

curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl

kubectl version

Minikube installation
----------------------
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
chmod +x ./minikube 
sudo mv ./minikube  /usr/local/bin/minikube


IAM Roles
--------
AmazonEC2FullAccess,
AmazonRoute53FullAccess,
IAMFullAccess,
AmazonVPCFullAccess,
AmazonS3FullAccess

aws configure
aws iam list-users

export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
export AWS_ACCESS_KEY_ID= <AWS_ACCESS_KEY_ID>
export AWS_SECRET_ACCESS_KEY= <AWS_SECRET_ACCESS_KEY>


Create k8s Cluster Installation
-------------------------------
export NAME= <ClusterName>.k8s.local

export KOPS_STATE_STORE=s3://<Bucket Name>

aws ec2 describe-availability-zones --region us-east-1

kops create cluster --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d ${NAME}

ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa

kops create secret --name  ${NAME} sshpublickey admin -i ~/.ssh/id_rsa.pub

kops edit cluster ${NAME} //:q (quit the vim)

echo $EDITOR
export EDITOR=nano

kops edit ig nodes --name ${NAME}

kops get ig --name ${NAME}

kops edit ig master-us-east-1a --name ${NAME}

kops update cluster ${NAME} --yes  (Create a New Cluster)

kops delete cluster ${NAME} --yes  (Create a Delete Cluster)

kops validate cluster   (Validate Cluster)

kubectl get nodes --show-labels



storage SSD
-----------
kubectl get pvc (PersistentVolumeClaim)
kubectl get pv  (PersistentVolume)

Kubectl Commands
----------------
kubectl get all

kubectl cluster-info  --Give Cluster Info

kubectl get pods -o wide

kubectl get nodes -o wide 

kubectl get nodes --output wide

kubectl delete -f. --Delete all pods/svcs/rs/deployment

kubectl describe pod/svc/rc/deployment

kubectl logs -f pod/svc/rc/deployment

kubectl apply -f . (. all yaml files)

kubectl get namespaces

kubectl get namespaces --show-labels

kubectl get pods --all-namespaces (To display pods and namespaces)

kubectl exec -it <Pod> bash

kubectl get pod <PodName>  -o yaml

kubectl get service <service name> --output yaml

kubectl exec  <pod name>  -- printenv | grep SERVICE

kubectl get pods -l app=nginx-app -o yaml | grep podIP  ---list of pods in using pod app labal

kubectl rollout undo deployment/nginx-app  --go for previous version

kubectl rollout status deployment/nginx-app

kubectl rollout history deployment/nginx-app

kubebtl get events

kubectl get services --all-namespaces --sort-by=.spec.type

kubectl get services --all-namespaces --sort-by=.metadata.name

connect to mysql database using pod
-----------------------------------
kubectl exec -it <pod> bash
after login pod search for mysql credentials echo ${MYSQL_ROOT_PASSWORD/MYSQL_USER,MYSQL_PASSWORD,MYSQL_DATA_BASE}
>env
>mysql -uroot -p <mysql root password> [or] mysql --user=root --password=$MYSQL_ROOT_PASSWORD
>show databases;
>use <database name>
>show tables;
>select * from <table name>;


ConfigMap & Secrets cmds
------------------------
kubectl get cm/secrets
 
kubectl describe cm/secret <NAME>
 
kubectl get cm/secrets <NAME> -o yaml
 
kubectl edit cm/secrets <NAME> --editing a secrets

echo -n 'admin' | base64 --using endcoded credentials
 ex: YWRtaW4=
 
echo 'YWRtaW4=' | base64 --decode --using decoded credentials
 ex: admin
 
 reference Links--https://github.com/moziauddin/wpMysql-pvc-kubernetes 
                  https://github.com/groovemonkey/project-based-kubernetes



Ingress Commands
----------------
wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml

wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/aws/service-l4.yaml

wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/aws/patch-configmap-l4.yaml

kubectl get all -n ingress-nginx

kubectl get svc -n ingress-nginx

nslookup ae1c9a3d0a47111e98ac10a45eb49c69-573458927.us-east-1.elb.amazonaws.com


ELK Stack
--------------

kubectl get po -n kube-system
kubectl get svc -n kube-system

Helm Installation
------------------
helm install --name monitoring --namespace monitoring stable/prometheus-operator

kubectl get all -n monitoring

prom-operator


Advanced Section (04-07-2019)
-----------------------------

kubectl describe node <node name>

kubectl get all --all-namespaces -- display all namespaces

kubectl top pod/nodes

kubectl autoscale deployment api-gateway --cpu-percent 400 --min 1 --max 4


1)Enabling the Metrics Server

https://github.com/kubernetes-incubator/metrics-server.git




Helm Installation
-----------------
https://get.helm.sh/helm-v2.14.2-linux-amd64.tar.gz

tar zxvf helm-v2.14.2-linux-amd64.tar.gz

sudo mv linux-amd64/helm /usr/local/bin/

rm helm-v2.14.2-linux-amd64.tar.gz

rm -rf ./linux-amd64/helm

helm version

helm init

helm repo update

helm install --name mysql-installation stable/mysql --set mysqlPassword=password

kubectl create serviceaccount --namespace kube-system tiller
kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'

helm ls
helm delete --purge mysql-installation 

Installing Prometheus Operator
-------------------------------

helm install --name monitoring-prometheus --namespace monitoring-prometheus stable/prometheus-operator

kubectl get all -n monitoring-prometheus 

kubectl edit -n monitoring-prometheus service/monitoring-prometheus-oper-prometheus (Edit prometheus)

prom-operator

kubectl get all -n monitoring

kubectl edit -n monitoring service/monitoring-grafana


Basic Ngnix Deployement on Kubernates
--------------------------------------

apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80


Google reference Link------https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/
Youtube reference Link---- https://www.youtube.com/watch?v=Jn3PMClvUh0


